tree = {
    'Root': ['A', 'B'],
    'A': ['A1', 'A2'],
    'B': ['B1', 'B2']
}

scores = {
    'A1': 3,
    'A2': 5,
    'B1': 2,
    'B2': 9
}

def alphabeta(node, depth, alpha, beta, is_maximizing):
    if node in scores:
        return scores[node]
    
    if is_maximizing:
        value = -float('inf')
        for child in tree[node]:
            value = max(value, alphabeta(child, depth + 1, alpha, beta, False))
            alpha = max(alpha, value)
            if beta <= alpha:
                break
        return value
    else:
        value = float('inf')
        for child in tree[node]:
            value = min(value, alphabeta(child, depth + 1, alpha, beta, True))
            beta = min(beta, value)
            if beta <= alpha:
                break
        return value


optimal_value = alphabeta('Root', 0, -float('inf'), float('inf'), True)
print("Optimal value:", optimal_value)
