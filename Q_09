import itertools

def tsp_brute_force(distance_matrix):
    n = len(distance_matrix)
    cities = list(range(n))
    min_cost = float('inf')
    best_path = []

    for perm in itertools.permutations(cities[1:]):
        path = [0] + list(perm) + [0]  # start and end at city 0
        cost = 0
        for i in range(len(path) - 1):
            cost += distance_matrix[path[i]][path[i+1]]
        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

distance_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

path, cost = tsp_brute_force(distance_matrix)
print("Optimal Path:", path)
print("Minimum Cost:", cost)
